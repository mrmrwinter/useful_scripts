
##############################################################################

configfile: "config.yaml"

rule all:
    input:
        config["assembly"] + "/hits.blast.out",
        only_pairs_table = config["assembly"] + "/onlyPairs.tsv",
        out_dir = directory(config["assembly"] + "/nucmer/")



rule database_creation:
    message:
        "[INFO] Creating database of all input reads..."
    input:
        config["assembly_path"]
    output:
        config["assembly"] + "/database/" + config["assembly"] + ".nin"
    params:
        db_name = config["assembly"] + "/database/" + config["assembly"]
    shell:
        "makeblastdb -in {input} -input_type 'fasta' -parse_seqids -dbtype nucl -out {params.db_name}"

# from Bio import SeqIO
#
# fasta=[]
# for entry in SeqIO(config["assembly_path"], "fasta"):
#     fasta += entry.id + "\n"


rule blast:
    input:
        assembly=  config["assembly_path"],# input the assembly
        db_name = config["assembly"] + "/database/" + config["assembly"] + ".nin"
    output:
        config["assembly"] + "/hits.blast.out"
    params:
        blastdb = config["assembly"] + "/database/" + config["assembly"],
        threads = config["threads"]
    shell:
        "blastn \
        -db {params.blastdb} \
        -query {input[0]} \
        -outfmt 6 \
        -max_target_seqs 2 \
        -max_hsps 1 \
        -evalue 1e-25 \
        -num_threads {params[threads]} \
        -out {output}"



rule only_pairs:
    input:
       blast = config["assembly"] + "/hits.blast.out"
    output:
       only_pairs_table = config["assembly"] + "/onlyPairs.tsv"
    run:
       import pandas as pd

       blast_output = pd.read_csv(input[0], sep="\t", header = None) # snakemake.input[0] is the blast table

       pairs = pd.DataFrame(columns = ['query', 'hit'])

       for index, value in blast_output.iterrows():
           if value[0] != value[1]:
               pairs.loc[index, ['query']] = value[0]
               pairs.loc[index, ['hit']] = value[1]

       only_pairs = pairs.drop_duplicates()

       only_pairs.to_csv(output[0], sep='\t')

# PRETTY SURE THIS LOOP IS INEFFICIENT AS ...


# IS THERE A WAY TO TAKE A SAMPLE LIST FROM THE ONLY PAIRS COLUMN HERE?
# IF SO I WONT HAVE TO USE THE DIRECTORY OUTPUT FLAG WHICH IS A pain
# CAN INSTEAD LOOP THROUGH THE LIST FOR EACH INDIVIDUAL ASSEMBLY AS THE LIST OF PAIRS WILL BE NOVEL AND INDIVIDUAL

#
rule single_scaffold_extraction:
    input:
        assembly = config["assembly_path"],
    output:
        # config["assembly"] + "/tmp/{scaffold}.fasta",
        directory(config["assembly"] + "/tmp/"),
    params:
        out_dir = config["assembly"] + "/tmp/"
    run:
        import os

        os.system("mkdir -p " + params[0])

        os.system("awk '/^>/ {OUT='" + params[0] + "' substr($0,2) '.fasta'}; OUT{print >OUT}' " + input[0])


# # nucmer analysis/alignment
rule nucmer_alignment:
    input:
        only_pairs_table = config["assembly"] + "/onlyPairs.tsv"
    output:
        out_dir = directory(config["assembly"] + "/nucmer/")
    params:
        tigs = config["assembly"] + "/tmp/",
        out_dir = config["assembly"] + "/nucmer/"
    run:
        import glob
        import os
        import pandas as pd

        mkdir -p params[1]

        pairs = pd.read_csv(input[0])

        for index, value in pairs.iterrows():
            q = params[0] + value[0] + ".fasta"
            h = params[0] + value[1] + ".fasta"
            nucmer = "nucmer -p " + params[1] + "nucmer." + str(index) + " " + q + " " + h
            os.system(nucmer)


        for delta in glob.glob(output[0] + "*.delta"):
            pair = delta.replace(output[0],"").replace(".delta","")
            mummer = "mummerplot -l -f --png --large " + delta + " -p " + params[0] + output[0] + pair
            os.system(mummer)
